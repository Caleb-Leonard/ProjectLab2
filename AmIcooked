async def main():
    global room_selected  # Tracks the currently active room
    room_selected = 1  # Default to Room 1 initially

    # Task for GUI
    gui_task = asyncio.create_task(run_gui())

    # Task for continuously updating sensors
    sensor_task = asyncio.create_task(update_sensors())

    # Dynamic task control for room-specific functionality
    active_task = None

    try:
        while True:
            # Cancel any existing room-specific task if the room changes
            if room_selected == 1:
                if not active_task or active_task.get_name() != "cooling1":
                    if active_task:
                        active_task.cancel()  # Cancel the previous task
                    print("Switching to Cooling for Room 1")
                    active_task = asyncio.create_task(cooling1(), name="cooling1")
            elif room_selected == 2:
                if not active_task or active_task.get_name() != "heating2":
                    if active_task:
                        active_task.cancel()  # Cancel the previous task
                    print("Switching to Heating for Room 2")
                    active_task = asyncio.create_task(Heating2(), name="heating2")

            await asyncio.sleep(1)  # Check periodically for room changes

    except asyncio.CancelledError:
        print("Tasks cancelled, shutting down gracefully...")

    finally:
        # Cleanup on exit
        gui_task.cancel()
        sensor_task.cancel()
        if active_task:
            active_task.cancel()
        print("All tasks cleaned up.")
