from adafruit_motor import stepper  # Ensure this is imported for stepper control

async def cooling1():
    global temperature_f1, preferred_temp

    while True:
        if preferred_temp and temperature_f1 > preferred_temp:
            print("Cooling Room 1")
            coolingIn1 = temperature_f1 - preferred_temp
            
            # Steps calculation (adjust as needed for your setup)
            coolingSteps = [200 * (1 / (temperature_f1 - preferred_temp)), 0]
            steps_to_takec = int(coolingSteps[0] - coolingSteps[1])

            # Ensure the cooling DC motor is active
            kit1.motor3.throttle = 0.0  # Turn off heating motor
            await asyncio.sleep(1.0)  # Allow settling time
            kit1.motor4.throttle = 1.0  # Activate cooling motor
            
            # Stepper motor cooling logic
            if steps_to_takec != 0:
                print(f"Taking {steps_to_takec} steps for cooling")
                for i in range(abs(steps_to_takec)):
                    direction = stepper.BACKWARD if steps_to_takec > 0 else stepper.FORWARD
                    kit1.stepper1.onestep(direction=direction, style=stepper.SINGLE)
                    await asyncio.sleep(0.02)  # Adjust for motor response time

            # Update cooling steps dynamically
            coolingSteps[1] = coolingSteps[0]

            # Exit the loop if temperature is close to preferred
            if abs(temperature_f1 - preferred_temp) <= 1:
                print("Cooling completed: Room 1")
                kit1.motor4.throttle = 0.0  # Turn off cooling motor
                break

        # Wait before rechecking temperature
        await asyncio.sleep(2)
