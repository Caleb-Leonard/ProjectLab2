async def update_sensors():
    global temperature_f1, humidity1, temperature_f2, humidity2
    while True:
        try:
            temperature_f1 = sensor1.temperature * (9 / 5) + 32
            humidity1 = sensor1.humidity
            temperature_f2 = sensor2.temperature * (9 / 5) + 32
            humidity2 = sensor2.humidity
            print(f"Room 1 - Temp: {temperature_f1}°F, Humidity: {humidity1}%")
            print(f"Room 2 - Temp: {temperature_f2}°F, Humidity: {humidity2}%")
        except RuntimeError as error:
            print(f"Sensor error: {error.args[0]}")
        await asyncio.sleep(3.0) # Delay between sensor readings

async def main():
    background_thread1 = threading.Thread(target = run_gui, daemon = True)
    background_thread1.start()
    
    task1 = asyncio.create_task(update_sensors())
    task2 = asyncio.create_task(cooling1())
    task3 = asyncio.create_task(Heating2())
    
    await asyncio.gather(task1, task2, task3)    
# Program Entry Point
if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("Program interrupted. Exiting...")
    finally:
        print("Performing cleanup...")
        sensor1.exit()
        sensor2.exit()
        GPIO.cleanup()
        print("Cleanup complete.")
