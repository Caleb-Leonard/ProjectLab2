import asyncio
import adafruit_dht
from adafruit_motorkit import MotorKit
import board
import RPi.GPIO as GPIO
import time
import tkinter as tk

# Global variables
preferred_temp = None
temperature_f1 = None
temperature_f2 = None
humidity1 = None
humidity2 = None

# DHT22 Sensors
sensor1 = adafruit_dht.DHT22(board.D20)
sensor2 = adafruit_dht.DHT22(board.D21)

# MotorKit for Room 1 and Room 2
kit1 = MotorKit(i2c=board.I2C(), address=0x61)
kit2 = MotorKit(i2c=board.I2C(), address=0x60)

# Initialize motors
kit1.motor3.throttle = 0.0
kit1.motor4.throttle = 0.0
kit2.motor3.throttle = 0.0
kit2.motor4.throttle = 0.0

# GUI Functionality
async def run_gui():
    global preferred_temp
    root = tk.Tk()
    root.geometry("500x500")
    root.title("Group 4 HVAC System")

    label = tk.Label(root, text="HVAC SYSTEM", font=('Sans serif', 20))
    label.pack(padx=150, pady=0)

    main_frame = tk.Frame(root)
    main_frame.pack()

    def room_1():
        hide_rooms(1)
    def room_2():
        hide_rooms(2)

    buttona = tk.Button(main_frame, text="Room 1", command=room_1)
    buttonb = tk.Button(main_frame, text="Room 2", command=room_2)

    buttona.pack(padx=0, pady=10)
    buttonb.pack(padx=0, pady=10)

    def hide_rooms(room_number):
        main_frame.pack_forget()
        if room_number == 1:
            rooms("Room 1")
        elif room_number == 2:
            rooms("Room 2")

    def go_back(room_frame):
        room_frame.pack_forget()
        main_frame.pack()

    def rooms(room_name):
        room_frame = tk.Frame(root)
        room_frame.pack()

        room_label = tk.Label(room_frame, text=f"Information for {room_name}", font=('Sans serif', 16))
        room_label.pack(pady=10)

        def store_temp():
            global preferred_temp
            u_inp = pref_temp_text.get("1.0", tk.END).strip()
            if not u_inp.isdigit():
                print("Invalid input. Please enter a number.")
                return
            temp = float(u_inp)
            if 0 <= temp <= 125:
                preferred_temp = temp
                print("Preferred Temperature Set to:", temp)
            else:
                print("Invalid range. Enter a temperature between 0 and 125.")

        def update_room_info():
            global temperature_f1, temperature_f2, humidity1, humidity2
            if room_name == "Room 1":
                temperature = temperature_f1
                humidity = humidity1
            elif room_name == "Room 2":
                temperature = temperature_f2
                humidity = humidity2

            textbox_tem.delete("1.0", tk.END)
            textbox_hum.delete("1.0", tk.END)
            if temperature is not None and humidity is not None:
                textbox_tem.insert(tk.END, f"{temperature:.1f}Â°F")
                textbox_hum.insert(tk.END, f"{humidity:.1f}%")
            root.after(2000, update_room_info)

        label_tem = tk.Label(room_frame, text="Temperature", font=('Sans serif', 12))
        label_tem.pack(side='top', pady=10)

        textbox_tem = tk.Text(room_frame, height=1, width=5, font=('Sans serif', 12), borderwidth=5)
        textbox_tem.pack(side='top', padx=10)

        label_hum = tk.Label(room_frame, text="Humidity", font=('Sans serif', 12))
        label_hum.pack(side='top', pady=10)

        textbox_hum = tk.Text(room_frame, height=1, width=5, font=('Sans serif', 12), borderwidth=5)
        textbox_hum.pack(side='top', padx=10)

        pref_temp_label = tk.Label(room_frame, text="Preferred Temperature", font=('Sans serif', 12))
        pref_temp_label.pack(side='top', pady=10)

        pref_temp_text = tk.Text(room_frame, height=1, width=5, font=('Sans serif', 12), borderwidth=5)
        pref_temp_text.pack(side='top', padx=10)

        sure = tk.Button(room_frame, text="Set Temperature", font=('Sans serif', 12), bg="white", command=store_temp)
        sure.pack(padx=10, pady=10)

        button3 = tk.Button(room_frame, text="Back", font=('Sans serif', 12), command=lambda: go_back(room_frame))
        button3.pack(padx=0, pady=10)

        update_room_info()

    root.mainloop()

# Room 1 Cooling
async def cooling1():
    global temperature_f1, preferred_temp
    while True:
        if preferred_temp and temperature_f1 and (temperature_f1 > preferred_temp):
            print("Cooling Room 1")
            kit1.motor4.throttle = 1.0
            await asyncio.sleep(10)
            kit1.motor4.throttle = 0.0
        await asyncio.sleep(2)

# Room 2 Heating
async def heating2():
    global temperature_f2, preferred_temp
    while True:
        if preferred_temp and temperature_f2 and (temperature_f2 < preferred_temp):
            print("Heating Room 2")
            kit2.motor3.throttle = 1.0
            await asyncio.sleep(10)
            kit2.motor3.throttle = 0.0
        await asyncio.sleep(2)

# Main function
async def main():
    gui_task = asyncio.create_task(run_gui())
    cooling_task = asyncio.create_task(cooling1())
    heating_task = asyncio.create_task(heating2())
    await asyncio.gather(gui_task, cooling_task, heating_task)

# Temperature sensor updates
async def update_sensors():
    global temperature_f1, temperature_f2, humidity1, humidity2
    while True:
        try:
            temperature_f1 = sensor1.temperature * (9 / 5) + 32
            humidity1 = sensor1.humidity
            temperature_f2 = sensor2.temperature * (9 / 5) + 32
            humidity2 = sensor2.humidity
        except RuntimeError as error:
            print("Sensor read error:", error.args[0])
        await asyncio.sleep(3)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("Shutting down...")
    finally:
        GPIO.cleanup()
