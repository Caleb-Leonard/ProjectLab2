async def main():
    global picked_room
    await start_gui_thread()  # Start GUI in a separate thread

    # Start the sensor update loop as a background task
    sensor_task = asyncio.create_task(update_sensors())
    current_task = None  # Track the currently running task

    try:
        while True:
            if picked_room == "Room 1":
                # Cancel any ongoing task
                if current_task and not current_task.done():
                    current_task.cancel()
                    try:
                        await current_task
                    except asyncio.CancelledError:
                        print("Cooling task canceled gracefully.")

                # Start cooling task for Room 1
                print("Starting cooling for Room 1")
                current_task = asyncio.create_task(cooling1())

            elif picked_room == "Room 2":
                # Cancel any ongoing task
                if current_task and not current_task.done():
                    current_task.cancel()
                    try:
                        await current_task
                    except asyncio.CancelledError:
                        print("Heating task canceled gracefully.")

                # Start heating task for Room 2
                print("Starting heating for Room 2")
                current_task = asyncio.create_task(Heating2())

            # Allow some delay to check the room and run other tasks
            await asyncio.sleep(1.0)
    finally:
        # Cancel sensor updates and running tasks if the loop exits
        if sensor_task and not sensor_task.done():
            sensor_task.cancel()
            try:
                await sensor_task
            except asyncio.CancelledError:
                print("Sensor updates canceled gracefully.")
