import asyncio
import adafruit_dht
from adafruit_motorkit import MotorKit
import board
import RPi.GPIO as GPIO
import tkinter as tk
import traceback

# Global variables
preferred_temp = None
sensor1 = adafruit_dht.DHT22(board.D20)
sensor2 = adafruit_dht.DHT22(board.D21)

temperature_f1 = 0
temperature_f2 = 0
humidity1 = 0
humidity2 = 0

# Initialize MotorKit for Room 1
kit1 = MotorKit(i2c=board.I2C(), address=0x61)
kit1.motor3.throttle = 0.0
kit1.motor4.throttle = 0.0
kit1.stepper1.release()

# Initialize MotorKit for Room 2
kit2 = MotorKit(i2c=board.I2C(), address=0x60)
kit2.motor3.throttle = 0.0
kit2.motor4.throttle = 0.0
kit2.stepper1.release()

# Async function to update sensor readings
async def update_sensors():
    global temperature_f1, humidity1, temperature_f2, humidity2
    while True:
        try:
            # Read sensor 1
            temp1 = sensor1.temperature
            hum1 = sensor1.humidity
            if temp1 is not None and hum1 is not None:
                temperature_f1 = temp1 * (9 / 5) + 32
                humidity1 = hum1
            else:
                print("Sensor 1 returned None. Skipping this reading.")

            # Read sensor 2
            temp2 = sensor2.temperature
            hum2 = sensor2.humidity
            if temp2 is not None and hum2 is not None:
                temperature_f2 = temp2 * (9 / 5) + 32
                humidity2 = hum2
            else:
                print("Sensor 2 returned None. Skipping this reading.")
        except RuntimeError as error:
            print(f"Sensor error: {error.args[0]}")
        except OSError as error:
            print(f"Critical sensor error: {error}")
            break
        except Exception as e:
            print(f"Unexpected error while reading sensors: {e}")
        await asyncio.sleep(3.0)


# Async function to run the GUI
async def run_gui():
    global preferred_temp
    root = tk.Tk()
    root.geometry("500x500")
    root.title("Group 4 HVAC System")

    # Main label
    label = tk.Label(root, text="HVAC SYSTEM", font=('Sans serif', 20))
    label.pack(padx=150, pady=0)

    main_frame = tk.Frame(root)
    main_frame.pack()

    def room_1():
        hide_rooms(1)
    def room_2():
        hide_rooms(2)

    buttona = tk.Button(main_frame, text="Room 1", command=room_1)
    buttonb = tk.Button(main_frame, text="Room 2", command=room_2)
    buttona.pack(padx=0, pady=10)
    buttonb.pack(padx=0, pady=10)

    def hide_rooms(room_number):
        main_frame.pack_forget()
        if room_number == 1:
            rooms("Room 1")
        elif room_number == 2:
            rooms("Room 2")

    def go_back(room_frame):
        room_frame.pack_forget()
        main_frame.pack()

    def rooms(room_name):
        room_frame = tk.Frame(root)
        room_frame.pack()

        room_label = tk.Label(room_frame, text=f"Information for {room_name}", font=('Sans serif', 16))
        room_label.pack(pady=10)

        def store_temp():
            global preferred_temp
            u_inp = pref_temp_text.get("1.0", tk.END).strip()
            if not u_inp.isdigit():
                print("Invalid input. Please enter a number.")
                return
            temp = float(u_inp)
            if 0 <= temp <= 125:
                preferred_temp = temp
                print(f"Preferred temperature set to: {preferred_temp}°F")
                return preferred_temp
            else:
                print("Invalid temperature range. Enter a value between 0 and 125.")

        def plusfive():
            global preferred_temp
            store_temp()
            if preferred_temp is not None:
                preferred_temp += 5
                pref_temp_text.delete("1.0", tk.END)
                pref_temp_text.insert(tk.END, str(preferred_temp))

        def minusfive():
            global preferred_temp
            store_temp()
            if preferred_temp is not None:
                preferred_temp -= 5
                pref_temp_text.delete("1.0", tk.END)
                pref_temp_text.insert(tk.END, str(preferred_temp))

        room_data = {
            "Room 1": (temperature_f1, humidity1),
            "Room 2": (temperature_f2, humidity2),
        }

        def update_temp_display():
            if room_name in room_data:
                temperature, humidity = room_data[room_name]
                textbox_tem.delete("1.0", tk.END)
                textbox_hum.delete("1.0", tk.END)
                textbox_tem.insert(tk.END, f"{temperature:.1f}°F")
                textbox_hum.insert(tk.END, f"{humidity:.1f}%")
            root.after(2000, update_temp_display)

        # Room-specific UI elements
        label_tem = tk.Label(room_frame, text="Temperature", font=('Sans serif', 12))
        label_tem.pack(pady=10)

        textbox_tem = tk.Text(room_frame, height=1, width=5, font=('Sans serif', 12), borderwidth=5)
        textbox_tem.pack(pady=10)

        label_hum = tk.Label(room_frame, text="Humidity", font=('Sans serif', 12))
        label_hum.pack(pady=10)

        textbox_hum = tk.Text(room_frame, height=1, width=5, font=('Sans serif', 12), borderwidth=5)
        textbox_hum.pack(pady=10)

        Pref_temp_label = tk.Label(room_frame, text="Preferred Temperature", font=('Sans serif', 12))
        Pref_temp_label.pack(pady=10)

        pref_temp_text = tk.Text(room_frame, height=1, width=5, font=('Sans serif', 12), borderwidth=5)
        pref_temp_text.pack(pady=10)

        pref_temp_incre = tk.Button(room_frame, text="+", font=('Sans serif', 12), command=plusfive)
        pref_temp_incre.pack(pady=10)

        pref_temp_decre = tk.Button(room_frame, text="-", font=('Sans serif', 12), command=minusfive)
        pref_temp_decre.pack(pady=10)

        button3 = tk.Button(room_frame, text="Back", font=('Sans serif', 12), command=lambda: go_back(room_frame))
        button3.pack(pady=10)

        update_temp_display()

    root.mainloop()

# Async motor control functions
async def cooling1():
    global preferred_temp
    while True:
        if preferred_temp is not None and (temperature_f1 - preferred_temp) > 5:
            print("Cooling Room 1...")
            kit1.motor4.throttle = 1.0
            await asyncio.sleep(10.0)
            kit1.motor4.throttle = 0.0
        await asyncio.sleep(3.0)

async def heating2():
    global preferred_temp
    while True:
        if preferred_temp is not None and (preferred_temp - temperature_f2) > 5:
            print("Heating Room 2...")
            kit2.motor3.throttle = 1.0
            await asyncio.sleep(10.0)
            kit2.motor3.throttle = 0.0
        await asyncio.sleep(3.0)

# Main async function
async def main():
    try:
        task1 = asyncio.create_task(run_gui())
        task2 = asyncio.create_task(cooling1())
        task3 = asyncio.create_task(heating2())
        task4 = asyncio.create_task(update_sensors())
        await asyncio.gather(task1, task2, task3, task4)
    except Exception as e:
        print("An unexpected error occurred:")
        traceback.print_exc()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("Program interrupted by user. Exiting...")
    except Exception as e:
        print("An unexpected error occurred:")
        traceback.print_exc()
    finally:
        print("Performing cleanup...")
        sensor1.exit()
        sensor2.exit()
        GPIO.cleanup()
        print("Cleanup complete. Goodbye!")
